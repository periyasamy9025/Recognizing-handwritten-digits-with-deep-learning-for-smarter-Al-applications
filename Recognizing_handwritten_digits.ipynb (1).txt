{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMfZJDVJIWq28zpeU287PkN",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Mahesh3606/Recognizing-handwritten-digits-with-deep-learning-for-smarter-Al-applications/blob/main/Recognizing_handwritten_digits.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import Dataset, DataLoader, random_split\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "!pip install streamlit"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MWv-EkE3snuQ",
        "outputId": "de9d093a-32a8-4da3-9f6d-e275f9a9a9fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: streamlit in /usr/local/lib/python3.11/dist-packages (1.45.1)\n",
            "Requirement already satisfied: altair<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<6,>=4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (8.2.0)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<25,>=20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (24.2)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<12,>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (11.2.1)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.11/dist-packages (from streamlit) (5.29.4)\n",
            "Requirement already satisfied: pyarrow>=7.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.11/dist-packages (from streamlit) (2.32.3)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (9.1.2)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.11/dist-packages (from streamlit) (4.13.2)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.11/dist-packages (from streamlit) (3.1.44)\n",
            "Requirement already satisfied: pydeck<1,>=0.8.0b4 in /usr/local/lib/python3.11/dist-packages (from streamlit) (0.9.1)\n",
            "Requirement already satisfied: tornado<7,>=6.0.3 in /usr/local/lib/python3.11/dist-packages (from streamlit) (6.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (4.23.0)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.11/dist-packages (from altair<6,>=4.0->streamlit) (1.39.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.4.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.27->streamlit) (2025.4.26)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->altair<6,>=4.0->streamlit) (3.0.2)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (25.3.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (2025.4.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.36.2)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.11/dist-packages (from jsonschema>=3.0->altair<6,>=4.0->streamlit) (0.24.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "RqqA-dTRsvl4",
        "outputId": "6a2c8e77-3337-4c02-9561-ca3d99d83455"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f5515fc7-557b-4b94-ad32-ce0ed56e3b25\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f5515fc7-557b-4b94-ad32-ce0ed56e3b25\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving dataset.csv.xlsx to dataset.csv.xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Load dataset\n",
        "df = pd.read_excel(\"dataset.csv.xlsx\")\n",
        "print(\"Data shape:\", df.shape)\n",
        "print(df.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MD3LSvg4swHY",
        "outputId": "5fe04f38-3ab3-4f0c-af8c-644e91e32c75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data shape: (10, 785)\n",
            "   label  pixel0  pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  \\\n",
            "0      8     171     147     235     144     113       0     119      93   \n",
            "1      7     168      31     134     128      70     106      46     118   \n",
            "2      0     207      91      28     210      57     164      49     208   \n",
            "3      2     157     205     224     205     235     241     120     114   \n",
            "4      6      38     247      53     127     113      38     113     130   \n",
            "\n",
            "   pixel8  ...  pixel774  pixel775  pixel776  pixel777  pixel778  pixel779  \\\n",
            "0     166  ...       155        16        46       140       108        75   \n",
            "1     205  ...        92        35       188       141       238       121   \n",
            "2     134  ...        73        42       236        86       190       201   \n",
            "3       4  ...       189        22        17       235        38       202   \n",
            "4     138  ...       131       218        12        28        50       235   \n",
            "\n",
            "   pixel780  pixel781  pixel782  pixel783  \n",
            "0       127        26         8       120  \n",
            "1       193        60       197       235  \n",
            "2        56       252       107        63  \n",
            "3       115        69        32       179  \n",
            "4       245        22       130        37  \n",
            "\n",
            "[5 rows x 785 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop('label', axis=1).values.astype(np.float32) / 255.0\n",
        "y = df['label'].values.astype(np.int64)\n",
        "\n",
        "X = X.reshape(-1, 1, 28, 28)  # Reshape for PyTorch: [batch, channels, height, width]\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DA5yCwe7swbm",
        "outputId": "162626df-f6a0-4f08-88fa-44653bcee3df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[[0.67058825, 0.5764706 , 0.92156863, ..., 0.27450982,\n",
              "          0.69803923, 0.6509804 ],\n",
              "         [0.09019608, 0.79607844, 0.18431373, ..., 0.5568628 ,\n",
              "          0.        , 0.43137255],\n",
              "         [0.69411767, 0.2       , 0.6509804 , ..., 0.6627451 ,\n",
              "          0.92941177, 0.90588236],\n",
              "         ...,\n",
              "         [0.8627451 , 0.29803923, 0.60784316, ..., 0.8862745 ,\n",
              "          0.654902  , 0.45490196],\n",
              "         [0.87058824, 0.09411765, 0.02745098, ..., 0.02352941,\n",
              "          0.1882353 , 0.12156863],\n",
              "         [0.7294118 , 0.76862746, 0.67058825, ..., 0.10196079,\n",
              "          0.03137255, 0.47058824]]],\n",
              "\n",
              "\n",
              "       [[[0.65882355, 0.12156863, 0.5254902 , ..., 0.42745098,\n",
              "          0.8352941 , 0.5764706 ],\n",
              "         [0.5176471 , 0.2627451 , 0.47843137, ..., 0.9529412 ,\n",
              "          0.85490197, 0.33333334],\n",
              "         [0.6627451 , 0.49411765, 0.16470589, ..., 0.2509804 ,\n",
              "          0.10196079, 0.6862745 ],\n",
              "         ...,\n",
              "         [0.47058824, 0.91764706, 0.49411765, ..., 0.14901961,\n",
              "          0.9411765 , 0.77254903],\n",
              "         [0.        , 0.12941177, 0.91764706, ..., 0.78431374,\n",
              "          0.10196079, 0.6862745 ],\n",
              "         [0.63529414, 0.19215687, 0.38431373, ..., 0.23529412,\n",
              "          0.77254903, 0.92156863]]],\n",
              "\n",
              "\n",
              "       [[[0.8117647 , 0.35686275, 0.10980392, ..., 0.92156863,\n",
              "          0.80784315, 0.8039216 ],\n",
              "         [0.8235294 , 0.25882354, 0.8235294 , ..., 0.6509804 ,\n",
              "          0.8       , 0.30588236],\n",
              "         [0.99607843, 0.1254902 , 0.85490197, ..., 0.89411765,\n",
              "          0.7529412 , 0.2784314 ],\n",
              "         ...,\n",
              "         [0.9254902 , 0.39215687, 0.10196079, ..., 0.5568628 ,\n",
              "          0.04313726, 0.37254903],\n",
              "         [0.29803923, 0.49803922, 0.15686275, ..., 0.99215686,\n",
              "          0.2627451 , 0.9254902 ],\n",
              "         [0.09019608, 0.5529412 , 0.47058824, ..., 0.9882353 ,\n",
              "          0.41960785, 0.24705882]]],\n",
              "\n",
              "\n",
              "       ...,\n",
              "\n",
              "\n",
              "       [[[0.2       , 0.5764706 , 0.78039217, ..., 0.654902  ,\n",
              "          0.50980395, 0.8       ],\n",
              "         [0.00784314, 0.7294118 , 0.05882353, ..., 0.68235296,\n",
              "          0.5568628 , 0.6862745 ],\n",
              "         [0.40784314, 0.3882353 , 0.7137255 , ..., 0.35686275,\n",
              "          0.40784314, 0.2901961 ],\n",
              "         ...,\n",
              "         [0.7921569 , 0.9411765 , 0.6431373 , ..., 0.9647059 ,\n",
              "          0.84705883, 0.9843137 ],\n",
              "         [0.15686275, 0.2901961 , 0.92941177, ..., 0.7647059 ,\n",
              "          0.7058824 , 0.84313726],\n",
              "         [0.9882353 , 0.56078434, 0.09411765, ..., 0.24705882,\n",
              "          0.07058824, 0.11372549]]],\n",
              "\n",
              "\n",
              "       [[[0.8235294 , 0.3764706 , 0.5764706 , ..., 0.67058825,\n",
              "          0.3529412 , 0.79607844],\n",
              "         [0.5764706 , 0.22745098, 0.13725491, ..., 0.8627451 ,\n",
              "          0.08627451, 0.3254902 ],\n",
              "         [0.92156863, 0.03137255, 0.39215687, ..., 0.63529414,\n",
              "          0.22352941, 0.10588235],\n",
              "         ...,\n",
              "         [0.74509805, 0.23137255, 0.3254902 , ..., 0.93333334,\n",
              "          0.5058824 , 0.6039216 ],\n",
              "         [0.57254905, 0.54509807, 0.8745098 , ..., 0.9764706 ,\n",
              "          0.8980392 , 0.13333334],\n",
              "         [0.68235296, 0.6745098 , 0.13333334, ..., 0.5176471 ,\n",
              "          0.24313726, 0.8627451 ]]],\n",
              "\n",
              "\n",
              "       [[[0.5176471 , 0.45882353, 0.10196079, ..., 0.49803922,\n",
              "          0.45882353, 0.42352942],\n",
              "         [0.9490196 , 0.5921569 , 0.5764706 , ..., 0.9098039 ,\n",
              "          0.34117648, 0.5921569 ],\n",
              "         [0.8039216 , 0.8156863 , 0.04705882, ..., 0.8627451 ,\n",
              "          0.70980394, 0.02352941],\n",
              "         ...,\n",
              "         [0.972549  , 0.7490196 , 0.72156864, ..., 0.8156863 ,\n",
              "          0.93333334, 0.4627451 ],\n",
              "         [0.13333334, 0.32941177, 0.85882354, ..., 0.19607843,\n",
              "          0.7372549 , 0.69803923],\n",
              "         [0.03921569, 0.56078434, 0.7764706 , ..., 0.47058824,\n",
              "          0.7294118 , 0.5882353 ]]]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Custom dataset class\n",
        "class DigitDataset(Dataset):\n",
        "    def __init__(self, X, y): # Corrected __init__\n",
        "        self.X = torch.tensor(X, dtype=torch.float32)\n",
        "        self.y = torch.tensor(y, dtype=torch.long)\n",
        "\n",
        "    def __len__(self): # Corrected __len__\n",
        "        return len(self.y)\n",
        "\n",
        "    def __getitem__(self, idx): # Corrected __getitem__\n",
        "        return self.X[idx], self.y[idx]\n",
        "\n",
        "dataset = DigitDataset(X, y)"
      ],
      "metadata": {
        "id": "RPwNWV5Wudjb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. Train-test split\n",
        "train_size = int(0.8 * len(dataset))\n",
        "test_size = len(dataset) - train_size\n",
        "train_set, test_set = random_split(dataset, [train_size, test_size])\n",
        "\n",
        "train_loader = DataLoader(train_set, batch_size=128, shuffle=True)\n",
        "test_loader = DataLoader(test_set, batch_size=128)\n"
      ],
      "metadata": {
        "id": "lkpL5IiLujLn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. CNN Model Definition\n",
        "class CNN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "        self.model = nn.Sequential(\n",
        "            nn.Conv2d(1, 32, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2),\n",
        "            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2),\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(64 * 7 * 7, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, 10)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.model(x)\n",
        "\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model = CNN().to(device)\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.001)\n"
      ],
      "metadata": {
        "id": "GFIIKEOAurEx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 5. Training Loop\n",
        "for epoch in range(10):\n",
        "    model.train()\n",
        "    total_loss = 0\n",
        "    for batch_X, batch_y in train_loader:\n",
        "        batch_X, batch_y = batch_X.to(device), batch_y.to(device)\n",
        "\n",
        "        outputs = model(batch_X)\n",
        "        loss = criterion(outputs, batch_y)\n",
        "\n",
        "        optimizer.zero_grad()\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        total_loss += loss.item()\n",
        "    print(f\"Epoch {epoch + 1}, Loss: {total_loss:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bledNhc1vg_5",
        "outputId": "31dbeae9-c62d-4380-eb31-e800bbe14280"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1, Loss: 2.3132\n",
            "Epoch 2, Loss: 2.0023\n",
            "Epoch 3, Loss: 1.7546\n",
            "Epoch 4, Loss: 1.6564\n",
            "Epoch 5, Loss: 1.6347\n",
            "Epoch 6, Loss: 1.5456\n",
            "Epoch 7, Loss: 1.4616\n",
            "Epoch 8, Loss: 1.4285\n",
            "Epoch 9, Loss: 1.4348\n",
            "Epoch 10, Loss: 1.4208\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 6. Evaluation\n",
        "model.eval()\n",
        "all_preds = []\n",
        "all_labels = []\n",
        "\n",
        "with torch.no_grad():\n",
        "  for batch_X, batch_y in test_loader:\n",
        "    batch_X = batch_X.to(device)\n",
        "    outputs = model(batch_X)\n",
        "    preds = torch.argmax(outputs, dim=1).cpu().numpy()\n",
        "    all_preds.extend(preds)\n",
        "    all_labels.extend(batch_y.numpy())\n"
      ],
      "metadata": {
        "id": "JJD7lD-pvk-v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 7. Metrics\n",
        "cm = confusion_matrix(all_labels, all_preds)\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Greens')\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"True\")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.show()\n",
        "\n",
        "print(\"Classification Report:\")\n",
        "print(classification_report(all_labels,all_preds))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "BIiOm70ovsNy",
        "outputId": "04ca7f31-da52-4c0c-cfe1-4106df70d923"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAxAAAAK9CAYAAAC0DIp5AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAPrdJREFUeJzt3XuU1XW9P/7nHoQZRQQUAS8kXo6KXw0SldAE+YXSzSRWpVkKlJZGHnOyFG9cLKeLFzIvlKWYxdGyJEsPZhiaiffwUqYpmueYIOAFRRxsZn5/tJyzJ2D7GQX3jD4erb1W857P/rxfe6/1KV7zfL8/n1JLS0tLAAAACqipdgEAAEDnoYEAAAAK00AAAACFaSAAAIDCNBAAAEBhGggAAKAwDQQAAFCYBgIAAChMAwEAABSmgQBYi7/97W856KCD0rNnz5RKpcyZM2e9nv+JJ55IqVTKrFmz1ut5O7MDDjggBxxwQLXLAOB1aCCADuuxxx7LF77wheywww6pq6vLZpttlv322y/f/e53s2rVqg069/jx4/PAAw/kG9/4Rq644orstddeG3S+t9KECRNSKpWy2WabrfV7/Nvf/pZSqZRSqZSzzz673ef/xz/+kalTp2bhwoXroVoAOpqNql0AwNpcd911+cQnPpHa2toceeSR2X333bN69erceuut+epXv5o///nP+cEPfrBB5l61alUWLFiQU089NV/60pc2yBzbbbddVq1ala5du26Q87+ejTbaKC+//HJ+/etf55Of/GSb3/30pz9NXV1dXnnllTd07n/84x+ZNm1aBg4cmCFDhhR+329/+9s3NB8Aby0NBNDhPP744znssMOy3Xbb5aabbspWW23V+rtJkybl0UcfzXXXXbfB5l+6dGmSpFevXhtsjlKplLq6ug12/tdTW1ub/fbbL//1X/+1RgMxe/bsfPjDH84vfvGLt6SWl19+OZtsskm6dev2lswHwJtjCRPQ4Xz729/OSy+9lB/96EdtmofX7LTTTjn++ONbf/7nP/+ZM888MzvuuGNqa2szcODAnHLKKWlsbGzzvoEDB+YjH/lIbr311uyzzz6pq6vLDjvskB//+Metx0ydOjXbbbddkuSrX/1qSqVSBg4cmORfS39e++/lpk6dmlKp1GbsxhtvzPve97706tUrm266aXbZZZeccsoprb9f1x6Im266Kfvvv3+6d++eXr165ZBDDslDDz201vkeffTRTJgwIb169UrPnj0zceLEvPzyy+v+Yv/N4Ycfnv/+7//O888/3zp211135W9/+1sOP/zwNY5/9tlnc+KJJ2aPPfbIpptums022ywf/OAHc99997UeM3/+/Oy9995JkokTJ7YuhXrtcx5wwAHZfffdc88992TEiBHZZJNNWr+Xf98DMX78+NTV1a3x+ceMGZPevXvnH//4R+HPCsD6o4EAOpxf//rX2WGHHbLvvvsWOv6oo47KGWeckT333DPnnXdeRo4cmYaGhhx22GFrHPvoo4/m4x//eA488MCcc8456d27dyZMmJA///nPSZJx48blvPPOS5J86lOfyhVXXJEZM2a0q/4///nP+chHPpLGxsZMnz4955xzTj760Y/mj3/8Y8X3/e53v8uYMWPyzDPPZOrUqamvr89tt92W/fbbL0888cQax3/yk5/Miy++mIaGhnzyk5/MrFmzMm3atMJ1jhs3LqVSKb/85S9bx2bPnp1dd901e+655xrHL1q0KHPmzMlHPvKRnHvuufnqV7+aBx54ICNHjmz9x/ygQYMyffr0JMnnP//5XHHFFbniiisyYsSI1vMsX748H/zgBzNkyJDMmDEjo0aNWmt93/3ud7Pllltm/PjxaWpqSpJ8//vfz29/+9t873vfy9Zbb134swKwHrUAdCAvvPBCS5KWQw45pNDxCxcubEnSctRRR7UZP/HEE1uStNx0002tY9ttt11LkpZbbrmldeyZZ55pqa2tbfnKV77SOvb444+3JGn5zne+0+ac48ePb9luu+3WqGHKlCkt5f9zet5557UkaVm6dOk6635tjssuu6x1bMiQIS19+/ZtWb58eevYfffd11JTU9Ny5JFHrjHfZz/72Tbn/NjHPtayxRZbrHPO8s/RvXv3lpaWlpaPf/zjLe9///tbWlpaWpqamlr69+/fMm3atLV+B6+88kpLU1PTGp+jtra2Zfr06a1jd9111xqf7TUjR45sSdIyc+bMtf5u5MiRbcZuuOGGliQtX//611sWLVrUsummm7aMHTv2dT8jABuOBALoUFasWJEk6dGjR6Hjr7/++iRJfX19m/GvfOUrSbLGXonddtst+++/f+vPW265ZXbZZZcsWrToDdf8717bO/GrX/0qzc3Nhd7z9NNPZ+HChZkwYUI233zz1vF3v/vdOfDAA1s/Z7ljjjmmzc/7779/li9f3vodFnH44Ydn/vz5Wbx4cW666aYsXrx4rcuXkn/tm6ip+df/bTQ1NWX58uWty7PuvffewnPW1tZm4sSJhY496KCD8oUvfCHTp0/PuHHjUldXl+9///uF5wJg/dNAAB3KZpttliR58cUXCx3/97//PTU1Ndlpp53ajPfv3z+9evXK3//+9zbj73rXu9Y4R+/evfPcc8+9wYrXdOihh2a//fbLUUcdlX79+uWwww7Lz372s4rNxGt17rLLLmv8btCgQVm2bFlWrlzZZvzfP0vv3r2TpF2f5UMf+lB69OiRq666Kj/96U+z9957r/Fdvqa5uTnnnXde/uM//iO1tbXp06dPttxyy9x///154YUXCs+5zTbbtGvD9Nlnn53NN988CxcuzPnnn5++ffsWfi8A658GAuhQNttss2y99dZ58MEH2/W+f9/EvC5dunRZ63hLS8sbnuO19fmv2XjjjXPLLbfkd7/7XY444ojcf//9OfTQQ3PggQeuceyb8WY+y2tqa2szbty4XH755bnmmmvWmT4kyVlnnZX6+vqMGDEiP/nJT3LDDTfkxhtvzP/7f/+vcNKS/Ov7aY8//elPeeaZZ5IkDzzwQLveC8D6p4EAOpyPfOQjeeyxx7JgwYLXPXa77bZLc3Nz/va3v7UZX7JkSZ5//vnWOyqtD717925zx6LX/HvKkSQ1NTV5//vfn3PPPTd/+ctf8o1vfCM33XRTfv/736/13K/V+fDDD6/xu7/+9a/p06dPunfv/uY+wDocfvjh+dOf/pQXX3xxrRvPX3P11Vdn1KhR+dGPfpTDDjssBx10UEaPHr3Gd1K0mSti5cqVmThxYnbbbbd8/vOfz7e//e3cdddd6+38ALSfBgLocL72ta+le/fuOeqoo7JkyZI1fv/YY4/lu9/9bpJ/LcFJssadks4999wkyYc//OH1VteOO+6YF154Iffff3/r2NNPP51rrrmmzXHPPvvsGu997YFq/35r2ddstdVWGTJkSC6//PI2/yB/8MEH89vf/rb1c24Io0aNyplnnpkLLrgg/fv3X+dxXbp0WSPd+PnPf56nnnqqzdhrjc7amq32Oumkk/Lkk0/m8ssvz7nnnpuBAwdm/Pjx6/weAdjwPEgO6HB23HHHzJ49O4ceemgGDRrU5knUt912W37+859nwoQJSZLBgwdn/Pjx+cEPfpDnn38+I0eOzJ133pnLL788Y8eOXectQt+Iww47LCeddFI+9rGP5T//8z/z8ssv5+KLL87OO+/cZhPx9OnTc8stt+TDH/5wtttuuzzzzDO56KKLsu222+Z973vfOs//ne98Jx/84AczfPjwfO5zn8uqVavyve99Lz179szUqVPX2+f4dzU1NTnttNNe97iPfOQjmT59eiZOnJh99903DzzwQH76059mhx12aHPcjjvumF69emXmzJnp0aNHunfvnmHDhmX77bdvV1033XRTLrrookyZMqX1trKXXXZZDjjggJx++un59re/3a7zAbB+SCCADumjH/1o7r///nz84x/Pr371q0yaNCknn3xynnjiiZxzzjk5//zzW4/94Q9/mGnTpuWuu+7Kl7/85dx0002ZPHlyrrzyyvVa0xZbbJFrrrkmm2yySb72ta/l8ssvT0NDQw4++OA1an/Xu96VSy+9NJMmTcqFF16YESNG5KabbkrPnj3Xef7Ro0dn7ty52WKLLXLGGWfk7LPPznvf+9788Y9/bPc/vjeEU045JV/5yldyww035Pjjj8+9996b6667LgMGDGhzXNeuXXP55ZenS5cuOeaYY/KpT30qN998c7vmevHFF/PZz34273nPe3Lqqae2ju+///45/vjjc8455+T2229fL58LgPYptbRntx0AAPCOJoEAAAAK00AAAACFaSAAAIDCNBAAANAJ3XLLLTn44IOz9dZbp1QqZc6cOa/7nvnz52fPPfdMbW1tdtppp8yaNavd82ogAACgE1q5cmUGDx6cCy+8sNDxjz/+eD784Q9n1KhRWbhwYb785S/nqKOOyg033NCued2FCQAAOrlSqZRrrrkmY8eOXecxJ510Uq677ro8+OCDrWOHHXZYnn/++cydO7fwXBIIAADoIBobG7NixYo2r8bGxvVy7gULFmT06NFtxsaMGZMFCxa06zxvyydRv9L0crVLAACggroum1S7hHUqHbht1eaest9RmTZtWtuxKVMyderUN33uxYsXp1+/fm3G+vXrlxUrVmTVqlXZeOONC53nbdlAAABAZzR58uTU19e3Gautra1SNWungQAAgHKlUtWmrq2t3WANQ//+/bNkyZI2Y0uWLMlmm21WOH1I7IEAAIB3hOHDh2fevHltxm688cYMHz68XefRQAAAQCf00ksvZeHChVm4cGGSf92mdeHChXnyySeT/Gs51JFHHtl6/DHHHJNFixbla1/7Wv7617/moosuys9+9rOccMIJ7ZrXEiYAACjXSf7Efvfdd2fUqFGtP7+2d2L8+PGZNWtWnn766dZmIkm23377XHfddTnhhBPy3e9+N9tuu21++MMfZsyYMe2a9235HAh3YQIA6Ng69F2YPjCganO3zP2fqs1dlAQCAADKVXETdWfQSQIaAACgI5BAAABAOQFERRIIAACgMA0EAABQmCVMAABQzibqiiQQAABAYRIIAAAo50/sFfl6AACAwjQQAABAYZYwAQBAOZuoK5JAAAAAhUkgAACgnACiIgkEAABQmAQCAADK1YggKpFAAAAAhWkgAACAwixhAgCAclYwVSSBAAAACpNAAABAOQ+Sq0gCAQAAFKaBAAAACrOECQAAylnBVJEEAgAAKEwCAQAA5TyJuiIJBAAAUJgEAgAAygkgKpJAAAAAhWkgAACAwixhAgCAcp5EXZEEAgAAKEwCAQAA5dzGtSIJBAAAUJgGAgAAKMwSJgAAKGcFU0USCAAAoDAJBAAAlHMb14okEAAAQGESCAAAKCeAqEgCAQAAFKaBAAAACrOECQAAynkSdUUSCAAAoDAJBAAAlBNAVCSBAAAACtNAAAAAhVnCBAAA5TyJuiIJBAAAUJgEAgAAyvkTe0W+HgAAoDAJBAAAlLMHoiIJBAAAUJgGAgAAKMwSJgAAKGcFU0USCAAAoDAJBAAAlLOJuiIJBAAAUJgGAgAAKMwSJgAAKOdP7BX5egAAgMIkEAAAUM4m6ookEAAAQGEaCAAAoDBLmAAAoJwVTBVJIAAAgMIkEAAAUK5GBFGJBAIAAChMAgEAAOXcxrUiCQQAAFCYBgIAACjMEiYAAChnBVNFEggAAKAwCQQAAJQp2URdkQQCAAAoTAMBAAAUZgkTAACUsYSpMgkEAABQmAQCAADKCCAqk0AAAACFSSAAAKBMjQiiIgkEAABQmAYCAAAozBImAAAo4zaulUkgAACAwiQQAABQRgJRmQQCAAAoTAMBAAAUZgkTAACUsYSpMgkEAABQmAQCAADKCCAqk0Dwlrly9lX54OgPZe8hw/LpQ4/IA/c/WO2SoFNw7UD7uW5gw9FA8JaY+9835OxvnZMvfPELufLq2dll151z7Oe/mOXLn612adChuXag/Vw3vFmlUqlqr85AA8Fb4opZP8m4T4zL2HGHZMeddsxpU05NXV1d5vxyTrVLgw7NtQPt57qBDauqeyCWLVuWSy+9NAsWLMjixYuTJP3798++++6bCRMmZMstt6xmeawnr65+NQ/95aF87ujPto7V1NTkvcOH5f6F91exMujYXDvQfq4b2PCqlkDcdddd2XnnnXP++eenZ8+eGTFiREaMGJGePXvm/PPPz6677pq77777dc/T2NiYFStWtHk1Nja+BZ+Aop57/rk0NTVliz6btxnfYostsmzZ8ipVBR2fawfaz3XD+mAJU2VVSyCOO+64fOITn8jMmTPX+LJaWlpyzDHH5LjjjsuCBQsqnqehoSHTpk1rM3bq6afktCmnrveaAQDgna5qDcR9992XWbNmrbXTKpVKOeGEE/Ke97zndc8zefLk1NfXtxlr2ahpvdXJm9e7V+906dIly5e13by2fPny9OmzRZWqgo7PtQPt57phfSilcyQB1VK1JUz9+/fPnXfeuc7f33nnnenXr9/rnqe2tjabbbZZm1dtbe36LJU3qWu3rhm026DccfsdrWPNzc254/Y78+4h765iZdCxuXag/Vw3sOFVLYE48cQT8/nPfz733HNP3v/+97c2C0uWLMm8efNyySWX5Oyzz65WeaxnR0z4TE6ffEb+3+67Zfc9ds9Pfjw7q1atytiPHVLt0qBDc+1A+7luYMOqWgMxadKk9OnTJ+edd14uuuiiNDX9a9lRly5dMnTo0MyaNSuf/OQnq1Ue69kHPjgmzz37XC763sVZtmx5dtl1l1z0/QuzhTgZKnLtQPu5bnizOstm5moptbS0tFS7iFdffTXLli1LkvTp0yddu3Z9U+d7penl9VEWAAAbSF2XTapdwjptNnlY1eZe0XDH6x9UZVV9DsRrunbtmq222qraZQAAQAQQlXkSNQAAUFiHSCAAAKCjqBFBVCSBAAAACtNAAAAAhVnCBAAAZdzGtTIJBAAAUJgEAgAAykggKpNAAAAAhWkgAACAwixhAgCAMlYwVSaBAACATurCCy/MwIEDU1dXl2HDhuXOO++sePyMGTOyyy67ZOONN86AAQNywgkn5JVXXmnXnBIIAAAo01k2UV911VWpr6/PzJkzM2zYsMyYMSNjxozJww8/nL59+65x/OzZs3PyySfn0ksvzb777ptHHnkkEyZMSKlUyrnnnlt4XgkEAAB0Queee26OPvroTJw4MbvttltmzpyZTTbZJJdeeulaj7/tttuy33775fDDD8/AgQNz0EEH5VOf+tTrphb/TgMBAABlSqVS1V6NjY1ZsWJFm1djY+MaNa5evTr33HNPRo8e3TpWU1OT0aNHZ8GCBWv9XPvuu2/uueee1oZh0aJFuf766/OhD32oXd+PBgIAADqIhoaG9OzZs82roaFhjeOWLVuWpqam9OvXr814v379snjx4rWe+/DDD8/06dPzvve9L127ds2OO+6YAw44IKecckq7atRAAABABzF58uS88MILbV6TJ09eL+eeP39+zjrrrFx00UW5995788tf/jLXXXddzjzzzHadxyZqAAAoU81N1LW1tamtrX3d4/r06ZMuXbpkyZIlbcaXLFmS/v37r/U9p59+eo444ogcddRRSZI99tgjK1euzOc///mceuqpqakpli1IIAAAoJPp1q1bhg4dmnnz5rWONTc3Z968eRk+fPha3/Pyyy+v0SR06dIlSdLS0lJ4bgkEAACU6Sy3ca2vr8/48eOz1157ZZ999smMGTOycuXKTJw4MUly5JFHZptttmndQ3HwwQfn3HPPzXve854MGzYsjz76aE4//fQcfPDBrY1EERoIAADohA499NAsXbo0Z5xxRhYvXpwhQ4Zk7ty5rRurn3zyyTaJw2mnnZZSqZTTTjstTz31VLbccsscfPDB+cY3vtGueUst7ckrOolXml6udgkAAFRQ12WTapewTv2nj6ja3IvPuKVqcxclgQAAgDKdZAVT1dhEDQAAFCaBAACAMp1lE3W1SCAAAIDCJBAAAFBGAlGZBAIAAChMAwEAABRmCRMAAJSpsYSpIgkEAABQmAQCAADKCCAqk0AAAACFaSAAAIDCLGECAIAyngNRmQQCAAAoTAIBAABlSpFAVCKBAAAACtNAAAAAhVnCBAAAZWyirkwCAQAAFCaBAACAMhKIyiQQAABAYRIIAAAoI4CoTAIBAAAUpoEAAAAKs4QJAADK2ERdmQQCAAAoTAIBAABlJBCVSSAAAIDCNBAAAEBhljABAEAZS5gqk0AAAACFSSAAAKCMAKIyCQQAAFCYBAIAAMrYA1GZBAIAAChMAwEAABRmCRMAAJSxhKkyCQQAAFCYBAIAAMpIICqTQAAAAIVpIAAAgMIsYQIAgDJWMFUmgQAAAAqTQAAAQBmbqCuTQAAAAIVJIAAAoIwEojIJBAAAUJgGAgAAKMwSJgAAKGMJU2USCAAAoDAJBAAAlBFAVCaBAAAACtNAAAAAhVnCBAAAZWyirkwCAQAAFCaBAACAchKIiiQQAABAYRIIAAAoYw9EZRIIAACgMA0EAABQmCVMAABQxgqmyiQQAABAYRIIAAAoYxN1ZRIIAACgMA0EAABQmCVMAABQxhKmyiQQAABAYRIIAAAoI4GoTAIBAAAUJoEAAIAyAojKJBAAAEBhGggAAKAwS5gAAKCMTdSVSSAAAIDCJBAAAFBGAlHZ27KB2PgDO1e7BOiUVs19pNolAAAdnCVMAABAYW/LBAIAAN4oS5gqk0AAAACFSSAAAKCMBKIyCQQAAFCYBAIAAMoIICqTQAAAAIVpIAAAgMIsYQIAgDI2UVcmgQAAAAqTQAAAQBkJRGUSCAAAoDANBAAAUJglTAAAUMYSpsokEAAAQGESCAAAKCOAqEwCAQAAFKaBAAAACrOECQAAythEXZkEAgAAKEwCAQAA5SQQFUkgAACAwiQQAABQxh6IyiQQAABAYRoIAACgMEuYAACgTI0VTBVJIAAAgMIkEAAAUMYm6sokEAAAQGEaCAAAoDBLmAAAoEyNJUwVSSAAAIDCJBAAAFDGJurKJBAAAEBhEggAACjjL+yV+X4AAIDCNBAAANBJXXjhhRk4cGDq6uoybNiw3HnnnRWPf/755zNp0qRstdVWqa2tzc4775zrr7++XXNawgQAAGU6y21cr7rqqtTX12fmzJkZNmxYZsyYkTFjxuThhx9O37591zh+9erVOfDAA9O3b99cffXV2WabbfL3v/89vXr1ate8GggAAOiEzj333Bx99NGZOHFikmTmzJm57rrrcumll+bkk09e4/hLL700zz77bG677bZ07do1STJw4MB2z2sJEwAAlCmVSlV7NTY2ZsWKFW1ejY2Na9S4evXq3HPPPRk9enTrWE1NTUaPHp0FCxas9XNde+21GT58eCZNmpR+/fpl9913z1lnnZWmpqZ2fT8aCAAA6CAaGhrSs2fPNq+GhoY1jlu2bFmamprSr1+/NuP9+vXL4sWL13ruRYsW5eqrr05TU1Ouv/76nH766TnnnHPy9a9/vV01WsIEAAAdxOTJk1NfX99mrLa2dr2cu7m5OX379s0PfvCDdOnSJUOHDs1TTz2V73znO5kyZUrh82ggAACgTDU3UdfW1hZqGPr06ZMuXbpkyZIlbcaXLFmS/v37r/U9W221Vbp27ZouXbq0jg0aNCiLFy/O6tWr061bt0I1WsIEAACdTLdu3TJ06NDMmzevday5uTnz5s3L8OHD1/qe/fbbL48++miam5tbxx555JFstdVWhZuHRAMBAABtVHMTdXvU19fnkksuyeWXX56HHnooxx57bFauXNl6V6YjjzwykydPbj3+2GOPzbPPPpvjjz8+jzzySK677rqcddZZmTRpUrvmtYQJAAA6oUMPPTRLly7NGWeckcWLF2fIkCGZO3du68bqJ598MjU1/5cXDBgwIDfccENOOOGEvPvd784222yT448/PieddFK75i21tLS0rNdP0gGUDty22iVAp7Rq7iPVLgGAd4i6LptUu4R1+tivj67a3NccfEnV5i7KEiYAAKAwDQQAAFCYPRAAAFCmmrdx7QwkEAAAQGESCAAAKNPe26m+00ggAACAwjQQAABAYZYwAQBAGZuoK5NAAAAAhUkgAACgjPyhMgkEAABQmAQCAADK2ANRmQQCAAAoTAMBAAAUZgkTAACUsYSpMgkEAABQmAQCAADKlCQQFUkgAACAwjQQAABAYZYwAQBAGZuoK5NAAAAAhUkgAACgjPyhMgkEAABQmAQCAADK2ANRmQQCAAAoTAMBAAAUZgkTAACUsYSpMgkEAABQmAQCAADKlCQQFUkgAACAwjQQAABAYZYwAQBAGZuoK5NAAAAAhUkgAACgjPyhMgkEAABQmAQCAADK2ANRmQQCAAAoTAMBAAAUZgkTAACUsYSpMgkEAABQmAQCAADKlCQQFUkgAACAwt5QA/GHP/whn/nMZzJ8+PA89dRTSZIrrrgit95663otDgAA6Fja3UD84he/yJgxY7LxxhvnT3/6UxobG5MkL7zwQs4666z1XiAAALyVaqr46gzaXefXv/71zJw5M5dcckm6du3aOr7ffvvl3nvvXa/FAQAAHUu7N1E//PDDGTFixBrjPXv2zPPPP78+agIAgKqxibqydicQ/fv3z6OPPrrG+K233poddthhvRQFAAB0TO1uII4++ugcf/zxueOOO1IqlfKPf/wjP/3pT3PiiSfm2GOP3RA1AgAAHUS7lzCdfPLJaW5u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b3LLLbdk2223rXY58LZhCRMbXLdu3TJ06NDMmzevday5uTnz5s3L8OHDq1gZAG9HLS0t+dKXvpRrrrkmN910U7bffvtqlwRvKxII3hL19fUZP3589tprr+yzzz6ZMWNGVq5cmYkTJ1a7NOiwXnrppTz66KOtPz/++ONZuHBhNt9887zrXe+qYmXQsU2aNCmzZ8/Or371q/To0aN1v13Pnj2z8cYbV7k66PzcxpW3zAUXXJDvfOc7Wbx4cYYMGZLzzz8/w4YNq3ZZ0GHNnz8/o0aNWmN8/PjxmTVr1ltfEHQSpVJpreOXXXZZJkyY8NYWA29DGggAAKAweyAAAIDCNBAAAEBhGggAAKAwDQQAAFCYBgIAAChMAwEAABSmgQAAAArTQAAAAIVpIAA6mAkTJmTs2LGtPx9wwAH58pe//JbXMX/+/JRKpTz//PNv+dwAdFwaCICCJkyYkFKplFKplG7dumWnnXbK9OnT889//nODzvvLX/4yZ555ZqFj/aMfgA1to2oXANCZfOADH8hll12WxsbGXH/99Zk0aVK6du2ayZMntzlu9erV6dat23qZc/PNN18v5wGA9UECAdAOtbW16d+/f7bbbrsce+yxGT16dK699trWZUff+MY3svXWW2eXXXZJkvzP//xPPvnJT6ZXr17ZfPPNc8ghh+SJJ55oPV9TU1Pq6+vTq1evbLHFFvna176WlpaWNnP++xKmxsbGnHTSSRkwYEBqa2uz00475Uc/+lGeeOKJjBo1KknSu3fvlEqlTJgwIUnS3NychoaGbL/99tl4440zePDgXH311W3muf7667Pzzjtn4403zqhRo9rUCQCv0UAAvAkbb7xxVq9enSSZN29eHn744dx44435zW9+k1dffTVjxoxJjx498oc//CF//OMfs+mmm+YDH/hA63vOOeeczJo1K5deemluvfXWPPvss7nmmmsqznnkkUfmv/7rv3L++efnoYceyve///1suummGTBgQH7xi18kSR5++OE8/fTT+e53v5skaWhoyI9//OPMnDkzf/7zn3PCCSfkM5/5TG6++eYk/2p0xo0bl4MPPjgLFy7MUUcdlZNPPnlDfW0AdGKWMAG8AS0tLZk3b15uuOGGHHfccVm6dGm6d++eH/7wh61Ll37yk5+kubk5P/zhD1MqlZIkl112WXr16pX58+fnoIMOyowZMzJ58uSMGzcuSTJz5szccMMN65z3kUceyc9+9rPceOONGT16dJJkhx12aP39a8ud+vbtm169eiX5V2Jx1lln5Xe/+12GDx/e+p5bb7013//+9zNy5MhcfPHF2XHHHXPOOeckSXbZZZc88MAD+da3vrUevzUA3g40EADt8Jvf/CabbrppXn311TQ3N+fwww/P1KlTM2nSpOyxxx5t9j3cd999efTRR9OjR48253jllVfy2GOP5YUXXsjTTz+dYcOGtf5uo402yl577bXGMqbXLFy4MF26dMnIkSML1/zoo4/m5ZdfzoEHHthmfPXq1XnPe96TJHnooYfa1JGktdkAgHIaCIB2GDVqVC6++OJ069YtW2+9dTba6P/+Z7R79+5tjn3ppZcydOjQ/PSnP13jPFtuueUbmn/jjTdu93teeumlJMl1112XbbbZps3vamtr31AdALxzaSAA2qF79+7ZaaedCh2755575qqrrkrfvn2z2WabrfWYrbbaKnfccUdGjBiRJPnnP/+Ze+65J3vuuedaj99jjz3S3Nycm2++uXUJU7nXEpCmpqbWsd122y21tbV58skn15lcDBo0KNdee22bsdtvv/31PyQA7zg2UQNsIJ/+9KfTp0+fHHLIIfnDH/6Qxx9/PPPnz89//ud/5n//93+TJMcff3y++c1vZs6cOfnrX/+aL37xixWf4TBw4MCMHz8+n/3sZzNnzpzWc/7sZz9Lkmy33XYplUr5zW9+k6VLl+all15Kjx49cuKJJ+aEE07I5Zdfnsceeyz33ntvvve97+Xyyy9PkhxzzDH529/+lq9+9at5+OGHM3v27MyaNWtDf0UAdEIaCIANZJNNNsktt9ySd73rXRk3blwGDRqUz33uc3nllVdaE4mvfOUrOeKIIzJ+/PgMHz48PXr0yMc+9rGK57344ovz8Y9/PF/84hez66675uijj87KlSuTJNtss02mTZuWk08+Of369cuXvvSlJMmZZ56Z008/PQ0NDRk0aFA+8IEP5Lrrrsv222+fJHnXu96VX/ziF5kzZ04GDx6cmTNn5qyzztqA3w4AnVWpZV079QAAAP6NBAIAAChMAwEAABSmgQAAAArTQAAAAIVpIAAAgMI0EAAAQGEaCAAAoDANBAAAUJgGAgAAKEwDAQAAFKaBAAAACvv/AVl1nibx4w6bAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           2       0.00      0.00      0.00       0.0\n",
            "           4       0.00      0.00      0.00       1.0\n",
            "           8       0.00      0.00      0.00       1.0\n",
            "\n",
            "    accuracy                           0.00       2.0\n",
            "   macro avg       0.00      0.00      0.00       2.0\n",
            "weighted avg       0.00      0.00      0.00       2.0\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
            "/usr/local/lib/python3.11/dist-packages/sklearn/metrics/_classification.py:1565: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile app.py\n",
        "import streamlit as st\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import numpy as np\n",
        "from PIL import Image, ImageOps\n",
        "import cv2\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Model definition must match the one used in training\n",
        "class CNN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "        self.model = nn.Sequential(\n",
        "            nn.Conv2d(1, 32, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2),\n",
        "            nn.Conv2d(32, 64, kernel_size=3, padding=1),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(2),\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(64 * 7 * 7, 128),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(128, 10)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        return self.model(x)\n",
        "\n",
        "# Load trained model\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "model = CNN()\n",
        "# Save the trained model\n",
        "# torch.save(model.state_dict(), \"digit_cnn.pth\")\n",
        "print(\"Model saved to digit_cnn.pth\")\n",
        "# model.load_state_dict(torch.load(\"digit_cnn.pth\", map_location=device))\n",
        "model.load_state_dict(torch.load(\"digit_cnn.pth\", map_location=device), strict=False)\n",
        "model.eval()\n",
        "\n",
        "st.title(\"Handwritten Digit Recognition\")\n",
        "st.write(\"Upload an image or draw a digit (0-9)\")\n",
        "\n",
        "uploaded_file = st.file_uploader(\"Choose a digit image\", type=[\"png\", \"jpg\", \"jpeg\"])\n",
        "\n",
        "if uploaded_file is not None:\n",
        "    # Load image\n",
        "    image = Image.open(uploaded_file).convert('L')  # Convert to grayscale\n",
        "    image = ImageOps.invert(image)  # Invert image (white digit on black)\n",
        "    image = image.resize((28, 28))\n",
        "    st.image(image, caption='Uploaded Image (28x28)', width=150)\n",
        "\n",
        "    img_np = np.array(image)\n",
        "    img_np = img_np.astype(np.float32) / 255.0\n",
        "    img_tensor = torch.tensor(img_np).unsqueeze(0).unsqueeze(0)  # [1, 1, 28, 28]\n",
        "\n",
        "    # Predict\n",
        "    with torch.no_grad():\n",
        "        output = model(img_tensor)\n",
        "        predicted = torch.argmax(output, dim=1).item()\n",
        "\n",
        "    st.success(f\"Predicted Digit: *{predicted}*\")\n",
        "\n",
        "else:\n",
        "    st.info(\"Please upload a digit image for prediction.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LdI73YP7wIN-",
        "outputId": "297a191e-af84-4841-d90d-2720539f2b5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting app.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.save(model.state_dict(), \"digit_cnn.pth\")"
      ],
      "metadata": {
        "id": "ntwS0zJ3KqpF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "with open('model_pickle','wb') as files:\n",
        "    pickle.dump(model,files)"
      ],
      "metadata": {
        "id": "z_W4twzPFEY4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def show_samples(dataset, n=10):\n",
        "    plt.figure(figsize=(15, 2))\n",
        "    for i in range(n):\n",
        "        image, label = dataset[i]\n",
        "        image = image.squeeze()\n",
        "        plt.subplot(1, n, i+1)\n",
        "        plt.imshow(image, cmap='gray')\n",
        "        plt.title(f\"Label: {label}\")\n",
        "        plt.axis('off')\n",
        "    plt.suptitle(\"Sample Handwritten Digits\")\n",
        "    plt.show()\n",
        "def plot_metrics(history):\n",
        "    plt.figure(figsize=(12, 4))\n",
        "\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(history['train_loss'], label='Train Loss')\n",
        "    plt.plot(history['val_loss'], label='Val Loss')\n",
        "    plt.xlabel(\"Epoch\")\n",
        "    plt.ylabel(\"Loss\")\n",
        "    plt.title(\"Loss over Epochs\")\n",
        "    plt.legend()\n",
        "\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(history['train_acc'], label='Train Acc')\n",
        "    plt.plot(history['val_acc'], label='Val Acc')\n",
        "    plt.xlabel(\"Epoch\")\n",
        "    plt.ylabel(\"Accuracy\")\n",
        "    plt.title(\"Accuracy over Epochs\")\n",
        "    plt.legend()\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "84_HfrboxI8G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "history = {\n",
        "    'train_loss': [0.4, 0.2, 0.1],\n",
        "    'val_loss': [0.35, 0.18, 0.12],\n",
        "    'train_acc': [0.89, 0.95, 0.97],\n",
        "    'val_acc': [0.88, 0.94, 0.96],\n",
        "}\n",
        "plot_metrics(history)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 382
        },
        "id": "fLBiZkDAyPEF",
        "outputId": "ac9c8192-e44f-466d-8943-bc2f8258b093"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "torch.save(model.state_dict(), 'digit_cnn.pth')"
      ],
      "metadata": {
        "id": "S3yschmd7CS3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "\n",
        "def plot_label_distribution(labels, title=\"Label Distribution\"):\n",
        "    \"\"\"\n",
        "    labels: List or array of digit labels (e.g., y or y_true)\n",
        "    \"\"\"\n",
        "    plt.figure(figsize=(8, 5))\n",
        "    sns.countplot(x=labels, palette=\"muted\")\n",
        "    plt.title(title)\n",
        "    plt.xlabel(\"Digit Class\")\n",
        "    plt.ylabel(\"Frequency\")\n",
        "    plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "SDbFE69m8FIt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_label_distribution(y)         # Original labels\n",
        "plot_label_distribution(all_preds)    # Actual test labels\n",
        "plot_label_distribution(all_labels)    # Predicted test labels"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "tSPkTUGQ8P3t",
        "outputId": "76495da2-58b5-499f-bc79-af6814076a46"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-82-a0b68040c7d5>:10: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=labels, palette=\"muted\")\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-82-a0b68040c7d5>:10: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=labels, palette=\"muted\")\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-82-a0b68040c7d5>:10: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.countplot(x=labels, palette=\"muted\")\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}